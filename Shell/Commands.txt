--- SHELL COMMANDS ---

--- NAVIGATE THROUGH DIRECTORIES
- / - root directory
- ./ - current directory 
- ../ - parent directory
- ~ - return to my home
- ~ <username> - returns to the home directory of the user with <username>
- cd /<certain path>/<filename.sh> - opens the certain file, no matter in which dir am i
- realpath <път> - превръща произволен път в абсолютен път
- basename <път> - връща базовото име на файл(символите след последната наклонена черта)
- dirname <път> - връща пътя на директорията, в която е файл (символите преди последната наклонена черта)

--- USERS
- newgrp <група> - смяна на активна група в рамките на текущата сесия
- id - gives info about the curr user
- whoami - prints the name of the curr user
- who - prints all logedin users
- passwd - command for changing password

--- WORK WITH FILES/DIRS
- pwd - prints the current directory
- ls -a - lists all files starting with '.'(hidden files)
- ls -l - shows more info about the files/dirs, shows all files attributes
- touch <filename.extension> - creates a file
- mkdir <directory_name> - creates a directory
- rm <filename.extension> - removes a file (cant be reverted)
- rm -r <directory_name> - removes recursivly all the files + directories in a certain dir VERY CAREFUL WITH IT
- rmdir - removes an empty directory
- cat <filename.ext> - used to show the info of a file in one page
- less <filename.ext> - used to show the information of a large file page by page, using the arrows / faster than cat
- cp <път-от-къде> <път-къде> - copies a file from to
- cp -r <път-от-къде> <път-къде> - copies a directory from to
- mv <път-от-къде> <път-къде> - moves a file from to
- stat <filename> - shows the file attributes
- stat -L - същото като stat но, дереферира символните връзки
- stat -c / --format "symbol_to_filter" <filename> - shows the certain attribute (не дерефер. символните връзки)
- chown - changes the user/group of a certain file
- chmod <права> <файл> - changes the rights of a certain file
- chmod u=rwx,g=rx,o= - конкретни права
- chmod a=rw - същото като chmod u=rw,g=rw,o=rw 
- chmod g+x - добавя право на изпълнение за групата-собственик
- chmod u-w - премахва право на запис за потребителя-собственик
- chmod 755 - конкретни права в осмичен вид(3 групи - 7(011) - user, 5(101) - group, 5(101) - other, (rwe))
- chmod -R - работи рекурсивно за дадената директория и нейните поддиректории
- umask - sees the current mask (pod default = 022)
- umask <маска> можем да зададем множество от права, 
	които се премахват от тези по подразбиране при създаване на нов обект
- ln <текущ път> <нов път> - създава твърда връзка към <текущия път>
- ln-s <текущ път> <нов път> - създава символна връзка между текущия и новия път
- df <път> - отпечатва статистика за заето и свободно място на файловата система, 
	в която е подаденият път (или на всички файлови системи, ако не е подаден път)
- du <път> - рекурсивно изписва заетото място на подедената директория и нейните поддиректории
- realpath <път> - превръща произволен път в абсолютен път (дереферира всякакви символни връзки по пътя)
- basename <път> - връща базовото име на файл (работивърху пътя като низ, не се интересува от символни връзки)
- dirname <път> - връща пътя на директорията, в която е файл 
	(работивърху пътя като низ, не се интересува от символни връзки)
- readlink <път> - дереферира конкретна подадена връзка
- tar - archive utility
- <command> | xargs <command> - passes the output from the first command as actual arguments to the second command
- xargs -I - we use it only if the input should be inserted in multiple places in the command
- links +/-/[number] - returns these files with count of n links
- file [object] - returns the type of the object
- xxd [file] - prints all data in the file in binary (x16) format
- strings [file] - prints just the strings from the file

--- WORK WITH FILE CONTENT
- grep [options] pattern file - searches for a specific pattern in a file (line by line)
Option	Description for grep
-i	Ignore case (case-insensitive search).
-v	Invert match (print lines that do not match the pattern).
-c	Count the number of matching lines.
-n	Print line numbers along with matching lines.
-r	Recursively search directories.
-l	Print only the names of files containing matches.
-w	Match whole words only.
-q	Quiet mode (suppress output; useful for checking exit status).
- awk <pattern> - pattern scanning, processes and manipulates text based on patterns and fields. 
	(used to extract information and manipulate it)
- awk -F <pattern> - separate the line by fields and search for the pattern (fields are accessed via $1, $2...
	$0 - means a whole line)
	- $NR - number of lines
	- NF - number of columns
	- $NF - last column
- sort [options] - sorts the output of a command
	- k[index] (k1) - sorts by i-th column
	- t [delim] - the delimeter to split the columns of sorting by -k
	- n - sort the lines
	- r - sort in reverse mode
- tr -d ' ', -s '' - can replace a certain char with another
- tr 'a-z' 'A-Z' - makes all letters in the file big
	- [:alnum] - matches alphabet and numbers == [a-z] [A-Z] [0-9]
- cut - -f [number_of_column] -d [delim] - po default delim = '\t'
- comm file1 file2 - prints the content of file1, file2, both file's content 
- $ head <файл>- изписва първите 10 реда от файл в конзолата 
- $ head -n <N> <файл>- изписва първите <N> реда от файла 
- $ head -n -<N> <файл> - изписва всички без последните <N> реда от файла
- $ tail <файл>- изписва последните 10 реда от файл в конзолата 
- $ tail -n <N> <файл>- изписва последните <N> реда от файла 
- $ tail -n +<N> <файл> - изписва редовете от файла, започвайки от <N>-тия
- $ tail -f <файл> - изписва последните редове от файла и чака, изписвайки нови редове, добавени след това
- rev [file] - vseki ot redovete na faila se obrushtat
- nl [file] - in front of each line print its number in the file
- uniq - works only with two lines (thats why we should sort the lines first to work correctly)
	-c - get the lines count of each line
	-i - remove all dublicates lines no matter the letters - big/small
	-u - remove all dublicate lines
- cut -c 1-4 - cuts the first 4 chars for each line
- tr [nabor ot simvoli] [zamesti s tezi simvoli] 
	- -d [symbols] - remove all of these symbols from the file
	- -s 'symbol' - squeeze all symbols and leave it just as one interval
- grep [shablon] - izvejda vsichki redove, v koito se sreshta shablona
	- v (inverse) - matches all lines which DON'T match the shablon
	- A n - the matched line and the next n lines after it
	- B n - the matched line and n lines before it
	- C n - prints n lines before and n lines after + the matched line

--- HELP CENTER
- <certain command> --help - opens the basic help center of the command
- man <certain command> - shows the details of a certain command and explains how it works
- info <certain command> - shows detailed information about a certain command
- apropos <string> - searches for the <string> in all man's pages
- whatis <низ>- връща всички секции, в които се среща дадена man страница, и кратки описания на съответните теми

--- INFO ABOUT PROCESSES
- top - shows the running programs at the moment + how much resources are taken and the cpu is using

--- SEARCH COMMANDS
- grep "word" - returns only the lines in a data sequence, which contains the given word 
(WORKS ONLY for data sequence which is presented line by line)

--- DATE & TIME
- date - shows the current date/time
- date +<форматен низ> - shows the current date/time with this format
	- +'%Y-%m-%d %H:%M:%S' (2023-02-26 18:53:44)
	- +'%H:%M' (18:54)
	- +'%H:%M:%S.%N' (18:54:44.675)
- date -d <format> - trans
- date +'%s' - shows the unix timestamp (count of seconds passed for today)

--- VARIABLES
- $ - says that some symbol is a variable/get the variable - says to the shell that i want to use this variable
(example: a=5; echo $a => 5)

--- EXECUTE COMMANDS
- echo <something> - prints <something> on the next line
- <script_name.sh> - it will execute only if its in a directory listed in $PATH
- ./<filename.sh> - executes the shell script

--- Common Options with du
Option	Description
-a (disk usage for all - files & dirs) - without the -a by default it will show the disk usage for only dirs
-h	Displays sizes in a human-readable format (e.g., 1K, 234M, 2G).
-b	Displays sizes in bytes.
-k	Displays sizes in kilobytes.
-m	Displays sizes in megabytes.
-s	Summarizes the total size of a directory (does not list individual files).

--- DESCRIPTORS - a low-level intiger used from the os to access files/resources:
Number	Name	Description
0	stdin	Standard input (e.g., keyboard input or input from a pipe).
1	stdout	Standard output (e.g., output displayed on the terminal).
2	stderr	Standard error (e.g., error messages displayed on the terminal).
3+	Custom	Used for additional files or resources.

--- REDIRECTS
>: Redirect stdout to a file (overwrite).
>>: Redirect stdout to a file (append).
2>: Redirect stderr to a file.
&>: Redirect both stdout and stderr to a file.
2>: Redirect stderr to a file(overwrite)
2>&1: Redirect stderr to the same location as stdout.

--- COMPARISON OPERATORS:
-eq: Equal to.
-gt: Greater than.
-lt: Less than.
-ge: Greater than or equal to.
-le: Less than or equal to.
-ne: Not equal to.

--- FIND:
- find [options] [path] [expression]
- [options] 2 na broj for how to treat symbol links 
		- -L - follow symbol links
		- p - dont follow symbol links
[expression] - 3 categories: 
		- where (GLOBAL): GLOBAL options for the expression: -mindepth/-maxdepth
		- what (TESTS): what TESTS - if the found files/objects pass
			-type [flag]
			-name [pattern] - finds the objects with name which mach the pattern
			-path [pattern] - finds if the whole path mathces the pattern
			Globbing
			* - matches all symbols which can be found (with no restricted length) / 
				cat dir* - it will print all file's contents which start with dir...
			? - like the *, but is just for one symbol
			-perm mode - gets all objects with these permissions 
			- perm /mode - pone edin ot zadadenite bitove trqbva da suvpada s pravata na object
			- perm -mode - vsichki bitove trqbva da sa takiva
			-user - the user whose the owner
			-group - the group whose the owner
			- atime +/-/[number] - all files which are last opened before [number] days / +[number] - number days or more
			- ctime +/-/[number] - last changed (moved, deleted)
			- mtime +/-/[number] - last modified (modified content)
			- size +/-/[size]
				-c - bytes count in a file
				-b - symbols count in a file
			- -delete - deletes the found object
			OPERATORS
			-not [other_flag] - the opposite of the other_flag
			- [left condition] -o [right condition] - left or right condition da e izpulneno 
			- '([operation])' - skobite imat po-visok prioritet 
		-how - what to do (ACTIONS):
			-exec [command_to_execute] '{}' ';' or {\} \;
			-ok - ekvivalenta na -exec, no pita dali se sigurni/iskame da izpulnim komandata
			-printf [format_in_which_to_print_the_data] - za vseki ot failovete, kojto e podaden se printira v tozi format

--- PROCESSES
- ps - returns the current running processes
	- u [username] - returns the running processes of the given user
	- e - returns all running processes
	- ef - показва много информация за всички процеси
	- o можем да включим специфични колонки в изхода на ps
		- ps -u pesho -o pid,ppid,cmd - за всеки процес на потребителя pesho, изписва неговия PID, родителски PID и командa
- top - показва информация за процесите в интерактивен режим
- pstree - рисува дърво с процесите
- jobs показва всички процеси в текущата сесия и техните job ID-та
-  fg <job id> закача фонов процес към терминала
-  bg <job id> стартира паузиран прoцес във фонов режим
- alias get_value="cat /etc/passwd|grep 'vasi'"
	v consolata kato napisha veche get_value - shte mi se zamesti komandata
- env - env variables
	- export TEMP=temp (iztriva se v kraq na sesiqta)
	- env TEMP=temp (nachin da vkarame env vars v scripta, bez da zasqgat cqlata ni sesiq)
	- konfigurirame v bash.rc(za vsqka sesiq) ili bash.login(za vseki login)
- ps:
	-e - gives info about all processes
	-o columns_names: pid=New_name_optional,time=,cmd= - which columns to return
	-aux - returns the cpu, virtual memory and local memory which the process takes - naj-chesto se izpolzva tova v zadachite
- kill - kills a running process
	-9 <pid> - seek kill(naj-chesto se izpolzva)
	- killall - kills all the processes
- sleep <time> <process> - prespiva process
	- sleep <time> <process> & - prespiva process v background

--- VARIABLES
- env извежда цялата таблица с environment променливи на текущия shell
- export <име на променлива>=<стойност> задава стойност на environment променлива
-  Командата $ env <var1>=<val1> <var2>=<val2> ... <команда> може да се използва за да стартираме дадена команда с модифицирани environment променливи
	- Опцията -i игнорира всички съществуващи environment променливи и стартира командата само с тези, подадени директно на env
-  alias <име>=<команда> можем да създадем кратко име за често използвани команди
-  unalias <име> можем да изтрием alias
- При извикване на команда, shell-ът търси изпълним файл със съответното име в директориите, изброени в променливата ${PATH}
• ${SHELL} – пълен път до текущия shell
• ${USER} – потебителско име на текущия потребител
• ${HOME} – home директория на текущия потребител
• ${PS1} – низ, управляващ prompt-а
• ${PATH} – пътища за търсене на команди
• ${PWD} – текуща директория
• ${IFS} – Internal Field Separator
• ${EDITOR} – текстов редактор по подразбиране
- Променливата ${0} съдържа името (пътя) на самия скрипт
- Променливата ${#} съдържа броя параметри
- Променливата ${@} съдържа всички параметри - има специално поведение в кавички - "${@}" се разпакетира до "${1}" "${2}" "${3}" ...
- Променливата ${*} също съдържа всички параметри - няма допълнително специално поведение "${*}" се разпакетира до "${1} ${2} ${3} ..."
-  read <име на променлива> четем данни от stdin
- read -p <prompt> показва някакъв prompt на потребителя преди да чака за вход

--- REGEX:
- chesto se davat tekstova obrabotka ednata zad i drugata za procesi
- * (>= 0)
- +(>= 1)
- ? (1 proizvolen)
- [aouei] - match these symbols
- [^aouei] - match everything except these symbols
- [symbols]{3} - = 3 sr.
- [symbols]{,3} - <= 3 sr.
- [symbols]{3,} - >= 3 sr.
- - [symbols]{3,4} - 3-4 sr.
- (cat|dog).*\1 - ako iskame da se povtarq cat sled proizvolniq simvol
- (drugo)(cat|dog).*\2 - 2 zashtoto iskame 2-rata grupa(cat or dog) da se povtarq sled proizvolniq simvol
- (cat | dog)
- ^ - znak za nachalo na red
- \< = \b - nachalo na duma
- $ - znak za kraj na red
- \> = \b - kraj na duma
- \b<duma>\b - nachalo ili kraj na duma

--- SCRIPTS:
- - !#bin/bash
- variables declaration - 4 ways: $var or ${var} or "$var" (we use the "" because the spaces are threated as part of the var_name) or "${var}" (izpolzvame primer 4)
- spaces - 3,4
- brace expansion - 2,4
- "${@}" - vrushta vsichki argumenti podadeni na scripta - "${1}" "${2}" ...
- "${*}" - (PO-DOBROTO) vrushta vsichki argumenti podadeni na scripta - "${1} ${2}..."
- "${$#}" - broj na argumentite (broim ot nulata)
- var="$(command)"
- var="${variable}"

--- OTHER
- command|command|command... - gets the output from the left command and pass it as input to the right command
- command & - gives the oportunity the executed processes to work at the same time with the shell
(not the shell to sleep while waiting the first to finish and than to continue working)
- kill <process_id> - stoping the running process
- command ; command - first the first process is executed and than the second
- * - разгръща самия низ (example: echo demo* - it will print all directories which name starts with demo...)
- \<symbol> - stops the execution of a certain symbol 
(example: echo demo\* - it will print just demo*)
- '' - подтискат всякаква интерпретация
- "" - подтискат някои интерпретации
- - apropos <kl_duma>- kazva v koq stranica se namira neshto za <kl_duma>
- <command $(<another_command>)> - executes the <other_command> inside the current one
- <letter>* - filename starts with this letter
- wc <file> - print newlines, words etc count for a certain file(naj chesto izpolzvame pri sort po broj sreshtaniq)
	- l - lines
	- b - bytes
	- m - chars
	- w - words
- find -user - file is owned by user <uname (ID)> 
- id - print the user/group id's
- du - (disk usage) - stands for how many space does a certain object takes in the filesystem
- VAJNO ZA IZPITA
	- tar -caf <name>.tar.gz <name>(create auto file) - archive and compress with gz
	- tar -xaf <name>.tar.gz - za razarhiviraneto
- na izpita zaduljitelno predi da si arhivirame papkata s resheniqta i pravim kopie
- potoci za danni
	- input ustrojstva -> 0 - std::in
	- 1 - std::out -> output ustrojstva (po default v terminala)
	- 2 - std::err -> output ustrojstva (po default v terminala)
- text > file - overwrite the current file's content with text
- text >> file - append at the end of the file and dont clear the file's content
- command && second_command - run command and than second_command after it
- ekranirane na simvoli - escapvane na specialnite simvoli, taka che te da zagubqt specialnoto si znachenie
- chsh - smenqme shella po podrazbirane
- Ако искаме някоя команда да се изпълнява при стартиране на всеки
shell, можем да я сложим в скрипта ~/.bashrc
- Ако искаме някоя команда да се изпълнява при всеки логин, може да я
сложим в ~/.profile

zapiski:
Scripts:
Other:

vuprosi:
- kakvo pravqt fg i bg