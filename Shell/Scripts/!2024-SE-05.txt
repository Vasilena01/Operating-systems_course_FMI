#!/bin/bash

# Validate arguments
if [[ "${#}" -ne 2 ]]; then
    echo "Args count must be 2" >&2
    exit 1
fi

if [[ ! -f "${2}" ]]; then
    echo "Second arg must be a filename" >&2
    exit 1
fi

comm="${1}"
file="${2}"
output=$("${comm}" 2>/dev/null)

# Exit if command failed
if [[ "${?}" -ne 0 ]]; then
    exit 3
fi

timestamp=$(date +"%Y-%m-%d %H:%M")
day_of_week=$(date +"%w")
hour=$(date +"%H")

# Store historical data temporarily
historical_data=$(mktemp)
grep "${day_of_week} ${hour}" "${file}" > "${historical_data}"

# Append current data to file
echo "${day_of_week} ${hour} ${output}" >> "${file}"

# Skip if no historical data exists
if [[ ! -s "${historical_data}" ]]; then
    rm "${historical_data}"
    exit 0
fi

# Calculate historical average
historical_sum=0
count=0
while read -r line; do
    curr_output=$(echo "${line}" | awk '{print $NF}')
    historical_sum=$(echo "${curr_output} + ${historical_sum}" | bc)
    count=$((count + 1))
done < "${historical_data}"

historical_avg=$(echo "scale=6; ${historical_sum} / ${count}" | bc)

# Check if current value is abnormal (2×avg or 0.5×avg)
if (( $(echo "${output} > ${historical_avg} * 2" | bc -l) )) || \
   (( $(echo "${output} < ${historical_avg} / 2" | bc -l) )); then
    echo "${timestamp}: ${output} abnormal" >&2
    rm "${historical_data}"
    exit 2
fi

rm "${historical_data}"
exit 0