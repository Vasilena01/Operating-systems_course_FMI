#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <fcntl.h>
#include <err.h>
#include <sys/wait.h>

//Да се напише програма на С, която получава като параметър име на файл. Създава процес син, който записва стринга
//foobar във файла (ако не съществува, го създава, в противен случай го занулява), след което процеса родител прочита
//записаното във файла съдържание и го извежда на стандартния изход, добавяйки по един интервал между всеки два символа.

int main(int argc, char* argv[]) {

    if (argc != 2) {
        errx(1, "Expected 1 arg");
    }

    int fd = open(argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        err(2, "Couldn't open file %s", argv[1]);
    }

    pid_t child_pid = fork();

    if (child_pid == -1) {
        err(3, "Failed to fork");
    }

    if (child_pid == 0) {
        if (write(fd, "foobar", 6) != 6) {
            err(4, "Failed to write string to file");
        }

        close(fd);
        exit(0);
    }

    int childExitStatus;
    if (wait(&childExitStatus) == -1) {
        close(fd);
        err(5, "Couldn't wait child process");
    } 
    if (!WIFEXITED(childExitStatus)) {
        close(fd);
        err(5, "Child process didn't terminate");
    }

    if (WEXITSTATUS(childExitStatus) != 0) {
        close(fd);
        err(5, "Status is not 0");
    }

    fd = open(argv[1], O_RDONLY);
    if (fd == -1) {
        err(6, "Couldn't open file for read");
    }

    char buff[2];
    int bytesCount;
    if (lseek(fd, 0, SEEK_SET) == -1) {
        err(7, "Couldn't lseek");
    }

    while((bytesCount = read(fd, buff, 2)) > 0) {
        write(1, buff, 2);
        write(1, " ", 1);
    }

    if (bytesCount == -1) {
        err(8, "Couldn't read bytes from file");
    }

    close(fd);
}